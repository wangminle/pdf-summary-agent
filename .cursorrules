# 项目基础信息
1. 项目的目标是完善一个阅读学术和专利pdf并提取图表文本以及生成摘要的工作流；
2. 工作流的最终产出包括“1500–3000 字的阅读摘要 Markdown（默认中文）、重命名后的全部图表 PNG，并在摘要中按编号嵌入解释；
3. 工作流依赖本项目两个重要工具，一个是AGENTS.md文档，一个是/scripts/extract_pdf_assets.py；
4. AGENTS.md是项目目录中的基本工作流参考文档，从宏观流程和产出物方面，指导具备指令遵循和agentic调用能力的大模型，让大模型按照每一步的操作要求和标准完成任务；
5. AGENTS.md需要列出工作流具备的资源和使用细节，供大模型根据实际情况选择使用。
6. AGENTS.md中应该具备对大模型执行时的要求和提醒，特别是提醒大模型，无论大模型是以CLI的方式运行，还是以IDE的方式运行，执行时要提前检查当前所处的运行环境，因为macOS的终端和Windows的终端执行的命令是不一样的；
7. /scripts/extract_pdf_assets.py 脚本文件，是这个工作流非常重要的辅助工具，精确按照图注标号导出图表png，并完整导出文本内容；
8. /scripts/extract_pdf_assets.py 脚本文件，会开放参数供使用者操作，也会预置参数供大多数文档使用。



# 项目整体原则
## 目录结构
1. 主项目目录是pdf-summary-agent，主项目目录中包含/docs、/scripts、/ref和/tests四个目录；
2. 当前的提取图表和文本的脚本开发任务使用的目录是/scripts目录，所有代码都使用中文注释；
3. 所有测试脚本，测试临时数据和测试总结文档都放入/tests目录中；
4. 所有项目进行过程中撰写的文档，都放入/docs目录中；
5. 所有参考代码和文档都放入/ref目录中；这个目录中的文档不允许任何修改和调整。


## 文档管理
1. 项目执行中产生的初步讨论方案，放在/docs/initial目录中，方案讨论文档使用markdown格式；
2. 项目执行中产生的技术方案的讨论和评估文档，放在/docs/technical-review目录中，技术评估类文档使用markdown格式；
3. 项目执行中的计划和待办事项，放在/docs/todo目录中，待办事项类文档使用markdown格式。
4. 项目中产生的所有文档，都使用markdown格式；文档的文件名中包含任务/功能简述-yyyymmdd(日期）.md。



## 公共资源获取
1. 如果需要使用当天日期的情形，请先用系统命令如date，或Get-Date查询当前的真实时间和日期，再使用查询结果来命名或者描述；
2. 如果需要使用到本地文件路径的，请先使用系统命令如pwd，或Get-Location查询当前的真实文件路径，再使用查询结果来命名或者描述。


# 开发任务管理
## 开发环境 —— Python版
1. 项目整体使用python语言开发，python语言的版本为3.12；
2. 脚本的设计和开发使用官方的标准库，以及pymupdf, pdfminer.six这两个库；
3. 脚本整体使用pip管理依赖，检测脚本的依赖是否可用时，应该检查当前默认环境是否已经满足 requirements.txt。
4. 对于macOS系统，当使用python命令时，默认使用python3；对于Windows系统，当使用python命令时，默认使用python；
5. 代码风格：使用中文注释，类名使用驼峰命名，函数名使用下划线命名；


## 测试标准
1. /tests 目录中列出了，当前我们需要完成验证的多个PDF文档，同时/tests目录下每个PDF有一个同名的文件夹，作为该PDF的任务目录；
2. 每次测试对应的PDF时，请将输出的结果图表png放入对应的/images目录中，文本放入对应的/text目录中；
3. 每次测试脚本或者中间任务运行后，要检查/images目录是否存在最新的修改时间合理的图片文件，确保脚本执行成功。